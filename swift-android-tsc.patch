commit 990afca47e75cce136d2f59e464577e68a164035
Date:   Wed Jan 3 22:32:35 2024 +0530

    Android: add better nullability checks for nullability annotations added in NDK 26 (#444)
    
    Also fix one test.

diff --git a/swift-tools-support-core/Sources/TSCBasic/FileSystem.swift b/swift-tools-support-core/Sources/TSCBasic/FileSystem.swift
index 0fe6a36..e328f9a 100644
--- a/swift-tools-support-core/Sources/TSCBasic/FileSystem.swift
+++ b/swift-tools-support-core/Sources/TSCBasic/FileSystem.swift
@@ -490,8 +490,7 @@ private struct LocalFileSystem: FileSystem {
 
     func readFileContents(_ path: AbsolutePath) throws -> ByteString {
         // Open the file.
-        let fp = fopen(path.pathString, "rb")
-        if fp == nil {
+        guard let fp = fopen(path.pathString, "rb") else {
             throw FileSystemError(errno: errno, path)
         }
         defer { fclose(fp) }
@@ -520,8 +519,7 @@ private struct LocalFileSystem: FileSystem {
 
     func writeFileContents(_ path: AbsolutePath, bytes: ByteString) throws {
         // Open the file.
-        let fp = fopen(path.pathString, "wb")
-        if fp == nil {
+        guard let fp = fopen(path.pathString, "wb") else {
             throw FileSystemError(errno: errno, path)
         }
         defer { fclose(fp) }
diff --git a/swift-tools-support-core/Sources/TSCBasic/Process.swift b/swift-tools-support-core/Sources/TSCBasic/Process.swift
index 8bb3edf..9fe04f6 100644
--- a/swift-tools-support-core/Sources/TSCBasic/Process.swift
+++ b/swift-tools-support-core/Sources/TSCBasic/Process.swift
@@ -191,6 +191,9 @@ public final class Process {
 
         /// The current OS does not support the workingDirectory API.
         case workingDirectoryNotSupported
+
+        /// The stdin could not be opened.
+        case stdinUnavailable
     }
 
     public enum OutputRedirection {
@@ -697,7 +700,10 @@ public final class Process {
         var stdinPipe: [Int32] = [-1, -1]
         try open(pipe: &stdinPipe)
 
-        let stdinStream = try LocalFileOutputByteStream(filePointer: fdopen(stdinPipe[1], "wb"), closeOnDeinit: true)
+        guard let fp = fdopen(stdinPipe[1], "wb") else {
+            throw Process.Error.stdinUnavailable
+        }
+        let stdinStream = try LocalFileOutputByteStream(filePointer: fp, closeOnDeinit: true)
 
         // Dupe the read portion of the remote to 0.
         posix_spawn_file_actions_adddup2(&fileActions, stdinPipe[0], 0)
@@ -1376,6 +1382,8 @@ extension Process.Error: CustomStringConvertible {
             return "could not find executable for '\(program)'"
         case .workingDirectoryNotSupported:
             return "workingDirectory is not supported in this platform"
+        case .stdinUnavailable:
+            return "could not open stdin on this platform"
         }
     }
 }
diff --git a/swift-tools-support-core/Sources/TSCBasic/WritableByteStream.swift b/swift-tools-support-core/Sources/TSCBasic/WritableByteStream.swift
index aee907e..5b6e4c2 100644
--- a/swift-tools-support-core/Sources/TSCBasic/WritableByteStream.swift
+++ b/swift-tools-support-core/Sources/TSCBasic/WritableByteStream.swift
@@ -790,7 +790,7 @@ public final class LocalFileOutputByteStream: FileOutputByteStream {
     override final func writeImpl(_ bytes: ArraySlice<UInt8>) {
         bytes.withUnsafeBytes { bytesPtr in
             while true {
-                let n = fwrite(bytesPtr.baseAddress, 1, bytesPtr.count, filePointer)
+                let n = fwrite(bytesPtr.baseAddress!, 1, bytesPtr.count, filePointer)
                 if n < 0 {
                     if errno == EINTR { continue }
                     errorDetected(code: errno)
diff --git a/swift-tools-support-core/Sources/TSCTestSupport/PseudoTerminal.swift b/swift-tools-support-core/Sources/TSCTestSupport/PseudoTerminal.swift
index 59610b6..2797c71 100644
--- a/swift-tools-support-core/Sources/TSCTestSupport/PseudoTerminal.swift
+++ b/swift-tools-support-core/Sources/TSCTestSupport/PseudoTerminal.swift
@@ -24,7 +24,7 @@ public final class PseudoTerminal {
         if openpty(&primary, &secondary, nil, nil, nil) != 0 {
             return nil
         }
-        guard let outStream = try? LocalFileOutputByteStream(filePointer: fdopen(secondary, "w"), closeOnDeinit: false) else {
+        guard let outStream = try? LocalFileOutputByteStream(filePointer: fdopen(secondary, "w")!, closeOnDeinit: false) else {
             return nil
         }
         self.outStream = outStream
