diff --git a/sourcekit-lsp/Utilities/build-script-helper.py b/sourcekit-lsp/Utilities/build-script-helper.py
index d264f10c..7c69168e 100755
--- a/sourcekit-lsp/Utilities/build-script-helper.py
+++ b/sourcekit-lsp/Utilities/build-script-helper.py
@@ -136,6 +136,7 @@ def get_swiftpm_options(swift_exec: str, args: argparse.Namespace, suppress_verb
     if '-android' in build_target:
         swiftpm_args += [
             '-Xlinker', '-rpath', '-Xlinker', '$ORIGIN/../lib/swift/android',
+            '-Xlinker', '-landroid-spawn',
         ]
     elif not build_os.startswith('macosx'):
         # Library rpath for swift, dispatch, Foundation, etc. when installing
diff --git a/swift-build/Sources/SWBUtil/FSProxy.swift b/swift-build/Sources/SWBUtil/FSProxy.swift
index b446d21..f88f3c3 100644
--- a/swift-build/Sources/SWBUtil/FSProxy.swift
+++ b/swift-build/Sources/SWBUtil/FSProxy.swift
@@ -49,7 +49,7 @@ public struct FileInfo: Equatable, Sendable {
         #if os(Windows)
         return (statBuf.st_mode & UInt16(ucrt.S_IFREG)) != 0
         #else
-        return (statBuf.st_mode & S_IFREG) != 0
+        return (mode_t(statBuf.st_mode) & S_IFREG) != 0
         #endif
     }
 
@@ -57,7 +57,7 @@ public struct FileInfo: Equatable, Sendable {
         #if os(Windows)
         return (statBuf.st_mode & UInt16(ucrt.S_IFDIR)) != 0
         #else
-        return (statBuf.st_mode & S_IFDIR) != 0
+        return (mode_t(statBuf.st_mode) & S_IFDIR) != 0
         #endif
     }
 
@@ -65,7 +65,7 @@ public struct FileInfo: Equatable, Sendable {
         #if os(Windows)
         return (statBuf.st_mode & UInt16(S_IFLNK)) == S_IFLNK
         #else
-        return (statBuf.st_mode & S_IFMT) == S_IFLNK
+        return (mode_t(statBuf.st_mode) & S_IFMT) == S_IFLNK
         #endif
     }
 
@@ -75,7 +75,7 @@ public struct FileInfo: Equatable, Sendable {
         // Don't use FileManager.isExecutableFile due to https://github.com/swiftlang/swift-foundation/issues/860
         return (statBuf.st_mode & UInt16(_S_IEXEC)) != 0
         #else
-        return (statBuf.st_mode & S_IXUSR) != 0
+        return (mode_t(statBuf.st_mode) & S_IXUSR) != 0
         #endif
     }
 
@@ -1395,9 +1395,9 @@ public class PseudoFS: FSProxy, @unchecked Sendable {
                 #else
                 info.st_mtimespec = timespec(tv_sec: time_t(node.timestamp), tv_nsec: 0)
                 #endif
-                info.st_size = off_t(contents.bytes.count)
-                info.st_dev = node.device
-                info.st_ino = node.inode
+                info.st_size = numericCast(contents.bytes.count)
+                info.st_dev = numericCast(node.device)
+                info.st_ino = numericCast(node.inode)
                 return createFileInfo(info)
             case .directory(let dir):
                 var info = stat()
@@ -1405,12 +1405,12 @@ public class PseudoFS: FSProxy, @unchecked Sendable {
                 info.st_mode = UInt16(ucrt.S_IFDIR)
                 info.st_mtimespec = timespec(tv_sec: Int64(node.timestamp), tv_nsec: 0)
                 #else
-                info.st_mode = S_IFDIR
+                info.st_mode = numericCast(S_IFDIR)
                 info.st_mtimespec = timespec(tv_sec: time_t(node.timestamp), tv_nsec: 0)
                 #endif
-                info.st_size = off_t(dir.contents.count)
-                info.st_dev = node.device
-                info.st_ino = node.inode
+                info.st_size = numericCast(dir.contents.count)
+                info.st_dev = numericCast(node.device)
+                info.st_ino = numericCast(node.inode)
                 return createFileInfo(info)
             case .symlink(_):
                 var info = stat()
@@ -1418,12 +1418,12 @@ public class PseudoFS: FSProxy, @unchecked Sendable {
                 info.st_mode = UInt16(S_IFLNK)
                 info.st_mtimespec = timespec(tv_sec: Int64(node.timestamp), tv_nsec: 0)
                 #else
-                info.st_mode = S_IFLNK
+                info.st_mode = numericCast(S_IFLNK)
                 info.st_mtimespec = timespec(tv_sec: time_t(node.timestamp), tv_nsec: 0)
                 #endif
-                info.st_size = off_t(0)
-                info.st_dev = node.device
-                info.st_ino = node.inode
+                info.st_size = numericCast(0)
+                info.st_dev = numericCast(node.device)
+                info.st_ino = numericCast(node.inode)
                 return createFileInfo(info)
             }
         }
diff --git a/swift-build/Sources/SWBUtil/Lock.swift b/swift-build/Sources/SWBUtil/Lock.swift
index 2135ce6..fbff6f6 100644
--- a/swift-build/Sources/SWBUtil/Lock.swift
+++ b/swift-build/Sources/SWBUtil/Lock.swift
@@ -14,6 +14,8 @@
 public import os
 #elseif os(Windows)
 public import WinSDK
+#elseif canImport(Android)
+public import Android
 #else
 public import SWBLibc
 #endif
From: Marc Prud'hommeaux <mwp1@doraell.edu>
Date: Wed, 7 May 2025 10:24:19 -0400

diff --git a/llbuild/lib/Basic/Subprocess.cpp b/llbuild/lib/Basic/Subprocess.cpp
index bf2fd4d1..8d4ee3de 100644
--- a/llbuild/lib/Basic/Subprocess.cpp
+++ b/llbuild/lib/Basic/Subprocess.cpp
@@ -79,9 +79,12 @@ int pthread_fchdir_np(int fd)
 // Implementation mostly copied from _CFPosixSpawnFileActionsChdir in swift-corelibs-foundation
 static int posix_spawn_file_actions_addchdir_polyfill(posix_spawn_file_actions_t * __restrict file_actions,
                                                       const char * __restrict path) {
-#if defined(__GLIBC__) && !__GLIBC_PREREQ(2, 29)
+#if (defined(__GLIBC__) && !__GLIBC_PREREQ(2, 29)) || (defined(__OpenBSD__)) || (defined(__ANDROID__) && __ANDROID_API__ < 34)
   // Glibc versions prior to 2.29 don't support posix_spawn_file_actions_addchdir_np, impacting:
   //  - Amazon Linux 2 (EoL mid-2025)
+  // Currently missing as of:
+  //  - OpenBSD 7.5 (April 2024)
+  //  - Android <= 14
   return ENOSYS;
 #elif defined(__APPLE__) && defined(__MAC_OS_X_VERSION_MIN_REQUIRED) && __MAC_OS_X_VERSION_MIN_REQUIRED < 101500
   // Conditionally available on macOS if building with a deployment target older than 10.15
@@ -89,10 +92,6 @@ static int posix_spawn_file_actions_addchdir_polyfill(posix_spawn_file_actions_t
     return posix_spawn_file_actions_addchdir_np(file_actions, path);
   }
   return ENOSYS;
-#elif defined(__OpenBSD__)
-  // Currently missing as of:
-  //  - OpenBSD 7.5 (April 2024)
-  return ENOSYS;
 #elif defined(__GLIBC__) || defined(__APPLE__) || defined(__FreeBSD__) || (defined(__ANDROID__) && __ANDROID_API__ >= 34) || defined(__musl__)
   // Pre-standard posix_spawn_file_actions_addchdir_np version available in:
   //  - Solaris 11.3 (October 2015)
diff --git a/swiftpm/Utilities/bootstrap b/swiftpm/Utilities/bootstrap
index 156bf002a..d891da556 100755
--- a/swiftpm/Utilities/bootstrap
+++ b/swiftpm/Utilities/bootstrap
@@ -941,6 +941,7 @@ def get_swiftpm_flags(args):
             build_flags += ["--arch", "x86_64", "--arch", "arm64"]
         elif cross_compile_hosts.startswith('android-'):
             build_flags.extend(["--destination", args.cross_compile_config])
+            build_flags.extend(["-Xlinker", "-landroid-spawn"])
         else:
             logging.error("cannot cross-compile for %s", cross_compile_hosts)
             raise SystemExit(1)
