diff --git a/swift/utils/build-script-impl b/swift/utils/build-script-impl
index 16e05052609..114e768bdbb 100755
--- a/swift/utils/build-script-impl
+++ b/swift/utils/build-script-impl
@@ -2409,6 +2409,11 @@ for host in "${ALL_HOSTS[@]}"; do
                     continue
                 fi
 
+                if [[ "${BUILD_SWIFT_TOOLS}" == "0" ]]; then
+                    echo "Skipping building Foundation Macros for ${host}, because the host tools are not being built"
+                    continue
+                fi
+
                 if [[ "${SKIP_CLEAN_FOUNDATION}" == "0" ]]
                 then
                   # The Swift project might have been changed, but CMake might
@@ -2558,11 +2563,6 @@ for host in "${ALL_HOSTS[@]}"; do
                         -DCMAKE_FIND_ROOT_PATH:PATH="${CROSS_COMPILE_DEPS_PATH}"
                     )
                 fi
-                if [[ "${host}" == "android-"* ]]; then
-                    cmake_options+=(
-                        -DCMAKE_HAVE_LIBC_PTHREAD=True
-                    )
-                fi
                 ;;
             libdispatch|libdispatch_static)
                 LIBDISPATCH_BUILD_DIR=$(build_directory ${host} ${product})
@@ -3009,6 +3009,11 @@ for host in "${ALL_HOSTS[@]}"; do
                     continue
                 fi
 
+                if [[ "${BUILD_SWIFT_TOOLS}" == "0" && "${product}" == "foundation_macros" ]]; then
+                    echo "Skipping installing Foundation Macros for ${host}, because the host tools are not being built"
+                    continue
+                fi
+
                 if [[ -z "${INSTALL_FOUNDATION}" ]] ; then
                     continue
                 fi
diff --git a/swift-corelibs-foundation/CMakeLists.txt b/swift-corelibs-foundation/CMakeLists.txt
index 7f290d16..95366592 100644
--- a/swift-corelibs-foundation/CMakeLists.txt
+++ b/swift-corelibs-foundation/CMakeLists.txt
@@ -51,6 +51,7 @@ if(NOT CMAKE_SYSTEM_NAME STREQUAL Windows)
     endif()
 endif()
 
+set(CMAKE_SHARED_LINKER_FLAGS "")
 set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
 set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
 set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
diff --git a/swift-corelibs-foundation/Sources/Foundation/CMakeLists.txt b/swift-corelibs-foundation/Sources/Foundation/CMakeLists.txt
index 016bf294..5c42986a 100644
--- a/swift-corelibs-foundation/Sources/Foundation/CMakeLists.txt
+++ b/swift-corelibs-foundation/Sources/Foundation/CMakeLists.txt
@@ -162,6 +162,10 @@ if(NOT BUILD_SHARED_LIBS)
         "SHELL:$<$<COMPILE_LANGUAGE:Swift>:-Xfrontend -public-autolink-library -Xfrontend _FoundationICU>")
     target_compile_options(Foundation PRIVATE
         "SHELL:$<$<COMPILE_LANGUAGE:Swift>:-Xfrontend -public-autolink-library -Xfrontend swiftSynchronization>")
+    if(${CMAKE_SYSTEM_NAME} STREQUAL Android)
+      target_compile_options(Foundation PRIVATE
+          "SHELL:$<$<COMPILE_LANGUAGE:Swift>:-Xfrontend -public-autolink-library -Xfrontend android-spawn>")
+    endif()
 endif()
 
 set_target_properties(Foundation PROPERTIES
@@ -174,6 +174,12 @@
     target_link_libraries(Foundation PUBLIC
         swiftDispatch)
 endif()
+  if(${CMAKE_SYSTEM_NAME} STREQUAL Android)
+    target_link_libraries(Foundation PRIVATE android-spawn)
+    list(GET CMAKE_FIND_ROOT_PATH 0 SPAWN_DIR)
+    target_include_directories(Foundation PUBLIC ${SPAWN_DIR}/usr/include)
+    target_link_directories(Foundation PUBLIC ${SPAWN_DIR}/usr/lib)
+  endif()
 
 if(LINKER_SUPPORTS_BUILD_ID)
   target_link_options(Foundation PRIVATE "LINKER:--build-id=sha1")
diff --git a/swift-foundation/cmake/modules/SwiftFoundationSwiftSupport.cmake b/swift-foundation/cmake/modules/SwiftFoundationSwiftSupport.cmake
index cbdfc2a..bb4121d 100644
--- a/swift-foundation/cmake/modules/SwiftFoundationSwiftSupport.cmake
+++ b/swift-foundation/cmake/modules/SwiftFoundationSwiftSupport.cmake
@@ -37,6 +37,10 @@ function(_swift_foundation_install_target module)
     set(module_triple_command "${CMAKE_Swift_COMPILER}" -print-target-info)
     if(CMAKE_Swift_COMPILER_TARGET)
       list(APPEND module_triple_command -target ${CMAKE_Swift_COMPILER_TARGET})
+    else()
+      set(arg_list ${CMAKE_Swift_FLAGS})
+      separate_arguments(arg_list)
+      list(APPEND module_triple_command ${arg_list})
     endif()
     execute_process(COMMAND ${module_triple_command} OUTPUT_VARIABLE target_info_json)
     string(JSON module_triple GET "${target_info_json}" "target" "moduleTriple")
