diff --git a/sourcekit-lsp/Utilities/build-script-helper.py b/sourcekit-lsp/Utilities/build-script-helper.py
index 88141cdd..d264f10c 100755
--- a/sourcekit-lsp/Utilities/build-script-helper.py
+++ b/sourcekit-lsp/Utilities/build-script-helper.py
@@ -136,9 +136,6 @@ def get_swiftpm_options(swift_exec: str, args: argparse.Namespace, suppress_verb
     if '-android' in build_target:
         swiftpm_args += [
             '-Xlinker', '-rpath', '-Xlinker', '$ORIGIN/../lib/swift/android',
+            '-Xlinker', '-landroid-spawn',
-            # SwiftPM will otherwise try to compile against GNU strerror_r on
-            '-Xlinker', '-landroid-spawn',
-            # Android and fail.
-            '-Xswiftc', '-Xcc', '-Xswiftc', '-U_GNU_SOURCE',
         ]
     elif not build_os.startswith('macosx'):
         # Library rpath for swift, dispatch, Foundation, etc. when installing
diff --git a/swiftpm/Sources/PackagePlugin/Plugin.swift b/swiftpm/Sources/PackagePlugin/Plugin.swift
index 232543b66..5589c2346 100644
--- a/swiftpm/Sources/PackagePlugin/Plugin.swift
+++ b/swiftpm/Sources/PackagePlugin/Plugin.swift
@@ -595,7 +595,7 @@ fileprivate enum Library: Sendable {
         return LibraryHandle(rawValue: handle)
         #else
         guard let handle = dlopen(nil, RTLD_NOW | RTLD_LOCAL) else {
-            throw LibraryOpenError(message: String(cString: dlerror()))
+            throw LibraryOpenError(message: String(cString: dlerror()!))
         }
         return LibraryHandle(rawValue: handle)
         #endif
diff --git a/swiftpm/Utilities/bootstrap b/swiftpm/Utilities/bootstrap
index 156bf002a..d891da556 100755
--- a/swiftpm/Utilities/bootstrap
+++ b/swiftpm/Utilities/bootstrap
@@ -934,10 +934,7 @@ def get_swiftpm_flags(args):
         build_flags.extend(["-Xcc", "-I/usr/local/include"])
         build_flags.extend(["-Xlinker", "-L/usr/local/lib"])
 
-    # Don't use GNU strerror_r on Android.
-    if '-android' in args.build_target:
-        build_flags.extend(["-Xswiftc", "-Xcc", "-Xswiftc", "-U_GNU_SOURCE"])
-        build_flags.extend(["-Xlinker", "-landroid-spawn"])
+    build_flags.extend(["-Xlinker", "-landroid-spawn"])
 
     cross_compile_hosts = args.cross_compile_hosts
     if cross_compile_hosts:
diff --git a/swift-corelibs-xctest/cmake/modules/PlatformInfo.cmake b/swift-corelibs-xctest/cmake/modules/PlatformInfo.cmake
index 468dc61..a90ae3d 100644
--- a/swift-corelibs-xctest/cmake/modules/PlatformInfo.cmake
+++ b/swift-corelibs-xctest/cmake/modules/PlatformInfo.cmake
@@ -2,6 +2,10 @@
 set(print_target_info_invocation "${CMAKE_Swift_COMPILER}" -print-target-info)
 if(CMAKE_Swift_COMPILER_TARGET)
   list(APPEND print_target_info_invocation -target ${CMAKE_Swift_COMPILER_TARGET})
+else()
+  set(arg_list ${CMAKE_Swift_FLAGS})
+  separate_arguments(arg_list)
+  list(APPEND print_target_info_invocation ${arg_list})
 endif()
 execute_process(COMMAND ${print_target_info_invocation} OUTPUT_VARIABLE target_info_json)
 message(CONFIGURE_LOG "Swift Target Info: ${print_target_info_invocation}\n"
diff --git a/swift-driver/Utilities/build-script-helper.py b/swift-driver/Utilities/build-script-helper.py
index 6e62b127..5504095b 100755
--- a/swift-driver/Utilities/build-script-helper.py
+++ b/swift-driver/Utilities/build-script-helper.py
@@ -104,9 +104,6 @@ def get_swiftpm_options(args):
     if '-android' in args.build_target:
       swiftpm_args += [
         '-Xlinker', '-rpath', '-Xlinker', '$ORIGIN/../lib/swift/android',
-        # SwiftPM will otherwise try to compile against GNU strerror_r on
-        # Android and fail.
-        '-Xswiftc', '-Xcc', '-Xswiftc', '-U_GNU_SOURCE',
       ]
     else:
       # Library rpath for swift, dispatch, Foundation, etc. when installing
diff --git a/swift-testing/Sources/Testing/SourceAttribution/Backtrace.swift b/swift-testing/Sources/Testing/SourceAttribution/Backtrace.swift
index 78227e3..e0db2e9 100644
--- a/swift-testing/Sources/Testing/SourceAttribution/Backtrace.swift
+++ b/swift-testing/Sources/Testing/SourceAttribution/Backtrace.swift
@@ -65,11 +65,11 @@ public struct Backtrace: Sendable {
       } else {
         initializedCount = .init(clamping: backtrace(addresses.baseAddress!, .init(clamping: addresses.count)))
       }
-#elseif os(Android)
+#elseif os(Androi)
       initializedCount = addresses.withMemoryRebound(to: UnsafeMutableRawPointer.self) { addresses in
         .init(clamping: backtrace(addresses.baseAddress!, .init(clamping: addresses.count)))
       }
-#elseif os(Linux) || os(FreeBSD) || os(OpenBSD)
+#elseif os(Linux) || os(FreeBSD) || os(OpenBSD) || os(Android)
       initializedCount = .init(clamping: backtrace(addresses.baseAddress!, .init(clamping: addresses.count)))
 #elseif os(Windows)
       initializedCount = Int(clamping: RtlCaptureStackBackTrace(0, ULONG(clamping: addresses.count), addresses.baseAddress!, nil))
diff --git a/swift-testing/cmake/modules/PlatformInfo.cmake b/swift-testing/cmake/modules/PlatformInfo.cmake
index 94c60ef..ab8a491 100644
--- a/swift-testing/cmake/modules/PlatformInfo.cmake
+++ b/swift-testing/cmake/modules/PlatformInfo.cmake
@@ -9,6 +9,10 @@
 set(print_target_info_invocation "${CMAKE_Swift_COMPILER}" -print-target-info)
 if(CMAKE_Swift_COMPILER_TARGET)
   list(APPEND print_target_info_invocation -target ${CMAKE_Swift_COMPILER_TARGET})
+else()
+  set(arg_list ${CMAKE_Swift_FLAGS})
+  separate_arguments(arg_list)
+  list(APPEND print_target_info_invocation ${arg_list})
 endif()
 execute_process(COMMAND ${print_target_info_invocation} OUTPUT_VARIABLE target_info_json)
 message(CONFIGURE_LOG "Swift Target Info: ${print_target_info_invocation}\n"
