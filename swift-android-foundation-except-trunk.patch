diff --git a/swift-corelibs-foundation/Package.swift b/swift-corelibs-foundation/Package.swift
--- a/swift-corelibs-foundation/Package.swift
+++ b/swift-corelibs-foundation/Package.swift
@@ -176,7 +176,8 @@
                 "BlockRuntime",
                 "CMakeLists.txt"
             ],
-            cSettings: coreFoundationBuildSettings
+            cSettings: coreFoundationBuildSettings,
+            linkerSettings: [.linkedLibrary("log", .when(platforms: [.android]))]
         ),
         .target(
             name: "_CFXMLInterface",
diff --git a/swift-corelibs-foundation/Sources/Foundation/FileManager+POSIX.swift b/swift-corelibs-foundation/Sources/Foundation/FileManager+POSIX.swift
index e89b3bf6..a82fe1c2 100644
--- a/swift-corelibs-foundation/Sources/Foundation/FileManager+POSIX.swift
+++ b/swift-corelibs-foundation/Sources/Foundation/FileManager+POSIX.swift
@@ -347,10 +351,17 @@
             do {
                 guard fm.fileExists(atPath: _url.path) else { throw _NSErrorWithErrno(ENOENT, reading: true, url: url) }
                 _stream = try FileManager.default._fileSystemRepresentation(withPath: _url.path) { fsRep in
+#if canImport(Android)
+                    let ps = UnsafeMutablePointer<UnsafeMutablePointer<Int8>>.allocate(capacity: 2)
+                    defer { ps.deallocate() }
+                    ps.initialize(to: UnsafeMutablePointer(mutating: fsRep))
+                    ps.advanced(by: 1).initialize(to: unsafeBitCast(0, to: UnsafeMutablePointer<Int8>.self))
+#else
                     let ps = UnsafeMutablePointer<UnsafeMutablePointer<Int8>?>.allocate(capacity: 2)
                     defer { ps.deallocate() }
                     ps.initialize(to: UnsafeMutablePointer(mutating: fsRep))
                     ps.advanced(by: 1).initialize(to: nil)
+#endif
                     return fts_open(ps, FTS_PHYSICAL | FTS_XDEV | FTS_NOCHDIR | FTS_NOSTAT, nil)
                 }
                 if _stream == nil {
diff --git a/swift-corelibs-foundation/Sources/Foundation/NSPathUtilities.swift b/swift-corelibs-foundation/Sources/Foundation/NSPathUtilities.swift
--- a/swift-corelibs-foundation/Sources/Foundation/NSPathUtilities.swift
+++ b/swift-corelibs-foundation/Sources/Foundation/NSPathUtilities.swift
@@ -19,6 +19,8 @@
     get { WASILibc.errno }
     set { WASILibc.errno = newValue }
 }
+#elseif os(Android)
+import Android
 #endif
 
 #if os(Windows)
diff --git a/swift-corelibs-foundation/Sources/Foundation/Process.swift b/swift-corelibs-foundation/Sources/Foundation/Process.swift
index 758dd1df..02970992 100644
--- a/swift-corelibs-foundation/Sources/Foundation/Process.swift
+++ b/swift-corelibs-foundation/Sources/Foundation/Process.swift
@@ -927,8 +927,8 @@ open class Process: NSObject, @unchecked Sendable {
         }
         let useFallbackChdir: Bool
         if let dir = currentDirectoryURL?.path {
-            let chdirResult = _CFPosixSpawnFileActionsChdir(fileActions, dir)
-            useFallbackChdir = chdirResult == ENOSYS
+            // let chdirResult = _CFPosixSpawnFileActionsChdir(fileActions, dir)
+            useFallbackChdir = true ; let chdirResult = ENOSYS
             if !useFallbackChdir {
                 try _throwIfPosixError(chdirResult)
             }
diff --git a/swift-foundation/Sources/FoundationEssentials/FileManager/FileOperations+Enumeration.swift b/swift-foundation/Sources/FoundationEssentials/FileManager/FileOperations+Enumeration.swift
--- a/swift-foundation/Sources/FoundationEssentials/FileManager/FileOperations+Enumeration.swift
+++ b/swift-foundation/Sources/FoundationEssentials/FileManager/FileOperations+Enumeration.swift
@@ -169,7 +169,7 @@
                 return
             }
 
-            state = [UnsafeMutablePointer(mutating: path), nil].withUnsafeBufferPointer { dirList in
+            state = [UnsafeMutablePointer(mutating: path), unsafeBitCast(0, to: UnsafeMutablePointer<CChar>.self)].withUnsafeBufferPointer { dirList in
                 guard let stream = fts_open(dirList.baseAddress!, opts, nil) else {
                     return .error(errno, String(cString: path))
                 }
From dfc3d9dba1e8f0093851832716e9d050447e1aac
From: Alex Lorenz <arphaman@gmail.com>
Date: Wed, 23 Oct 2024 13:06:05 -0700
Subject: [PATCH] [android] fix the android build

Platform.swift regressed after 71eefee7fca08ecbeacc89098b74ab80319baa6b
---
 Sources/FoundationEssentials/Platform.swift | 35 ++++++++++++++++-----
 1 file changed, 27 insertions(+), 8 deletions(-)

diff --git a/swift-foundation/Sources/FoundationEssentials/Platform.swift b/swift-foundation/Sources/FoundationEssentials/Platform.swift
index d8b8fe6f..04875b52 100644
--- a/swift-foundation/Sources/FoundationEssentials/Platform.swift
+++ b/swift-foundation/Sources/FoundationEssentials/Platform.swift
@@ -29,8 +29,7 @@ fileprivate let _pageSize: Int = {
 // WebAssembly defines a fixed page size
 fileprivate let _pageSize: Int = 65_536
 #elseif canImport(Android)
-import Bionic
-import unistd
+import Android
 fileprivate let _pageSize: Int = Int(getpagesize())
 #elseif canImport(Glibc)
 import Glibc
@@ -142,7 +141,7 @@ extension Platform {
     typealias Operation<Input, Output> = (Input, UnsafeMutablePointer<Output>, UnsafeMutablePointer<CChar>, Int, UnsafeMutablePointer<UnsafeMutablePointer<Output>?>) -> Int32
     #endif
     
-    private static func withUserGroupBuffer<Input, Output, R>(_ input: Input, _ output: Output, sizeProperty: Int32, operation: Operation<Input, Output>, block: (Output) throws -> R) rethrows -> R? {
+    private static func withUserGroupBuffer<Input, Output, R>(_ input: Input, _ output: Output, sizeProperty: Int32, operation: Operation<Input, Output>, block: (Output) throws -> R?) rethrows -> R? {
         var bufferLen = sysconf(sizeProperty)
         if bufferLen == -1 {
             bufferLen = 4096 // Generous default size estimate
@@ -172,31 +171,51 @@ extension Platform {
     
     static func name(forUID uid: uid_t) -> String? {
         withUserGroupBuffer(uid, passwd(), sizeProperty: Int32(_SC_GETPW_R_SIZE_MAX), operation: getpwuid_r) {
-            String(cString: $0.pw_name)
+            // Android's pw_name `char *`` is nullable, so always coerce to a nullable pointer
+            // in order to be compatible with Android.
+            let pw_name: UnsafeMutablePointer<CChar>? = $0.pw_name
+            return pw_name.flatMap { String(cString: $0) }
         }
     }
     
     static func fullName(forUID uid: uid_t) -> String? {
         withUserGroupBuffer(uid, passwd(), sizeProperty: Int32(_SC_GETPW_R_SIZE_MAX), operation: getpwuid_r) {
-            String(cString: $0.pw_gecos)
+#if os(Android) && (arch(i386) || arch(arm))
+            // pw_gecos isn't available on 32-bit Android.
+            let pw_gecos: UnsafeMutablePointer<CChar>? = nil
+#else
+            // Android's pw_gecos `char *`` is nullable, so always coerce to a nullable pointer
+            // in order to be compatible with Android.
+            let pw_gecos: UnsafeMutablePointer<CChar>? = $0.pw_gecos
+#endif
+            return pw_gecos.flatMap { String(cString: $0) }
         }
     }
     
     static func name(forGID gid: gid_t) -> String? {
         withUserGroupBuffer(gid, group(), sizeProperty: Int32(_SC_GETGR_R_SIZE_MAX), operation: getgrgid_r) {
-            String(cString: $0.gr_name)
+            // Android's gr_name `char *`` is nullable, so always coerce to a nullable pointer
+            // in order to be compatible with Android.
+            let gr_name: UnsafeMutablePointer<CChar>? = $0.gr_name
+            return gr_name.flatMap { String(cString: $0) }
         }
     }
     
     static func homeDirectory(forUserName userName: String) -> String? {
         withUserGroupBuffer(userName, passwd(), sizeProperty: Int32(_SC_GETPW_R_SIZE_MAX), operation: getpwnam_r) {
-            String(cString: $0.pw_dir)
+            // Android's pw_dir `char *`` is nullable, so always coerce to a nullable pointer
+            // in order to be compatible with Android.
+            let pw_dir: UnsafeMutablePointer<CChar>? = $0.pw_dir
+            return pw_dir.flatMap { String(cString: $0) }
         }
     }
     
     static func homeDirectory(forUID uid: uid_t) -> String? {
         withUserGroupBuffer(uid, passwd(), sizeProperty: Int32(_SC_GETPW_R_SIZE_MAX), operation: getpwuid_r) {
-            String(cString: $0.pw_dir)
+            // Android's pw_dir `char *`` is nullable, so always coerce to a nullable pointer
+            // in order to be compatible with Android.
+            let pw_dir: UnsafeMutablePointer<CChar>? = $0.pw_dir
+            return pw_dir.flatMap { String(cString: $0) }
         }
     }
 }
